<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/" rel="alternate" type="text/html" /><updated>2024-08-28T11:14:18+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/feed.xml</id><title type="html">GSoC 2024 VisualCircuit Block Library - JdeRobot</title><author><name>Pankaj Keshav Borade</name></author><entry><title type="html">Coding Period Week 10: July 30 ~ Aug 05</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week10/" rel="alternate" type="text/html" title="Coding Period Week 10: July 30 ~ Aug 05" /><published>2024-07-05T00:00:00+05:30</published><updated>2024-07-05T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w10</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week10/"><![CDATA[<p>In the tenth week’s Monday meeting, we discussed progress until the ninth week and outlined the tasks for the upcoming week. The main goal is to perform a robotics application with new nested code. I chose David’s FSM issue for the robotics application. Mentor Dr. José María sent the GitHub link to David’s repository. Several issues arose, and one is still ongoing, which I will discuss in the Challenges section. Through this robotics application, several loose ends were identified, and I resolved them this week. However, one issue remains that I need to address.</p>

<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Solve the Robotics Application with nested and composed version (Found Issues)</li>
</ul>

<h2 id="sub-goals">Sub-Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Understand David’s FSM circuit and issue</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Replicate David’s VC Circuit with a newer version</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Run the FSM on a single level</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />New issue: Nested parameters not appearing in the build file</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolve the parameters issue by modifying earlier version code</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />New issue: Analyze the issue of nested FSM; unable to run single port with multiple IN and OUT.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Update the blog page with about, home, sidebar.</li>
</ul>

<h2 id="images">Images</h2>
<p>Older version FSM single level circuit:
<img src="../assets/images/twentyfour.png" alt="" /></p>

<p>Recreated working FSM circuit with nested code:
<img src="../assets/images/twentyfive.png" alt="" />
<img src="../assets/images/twentysix.png" alt="" /></p>

<p>Output of single level:
<img src="../assets/images/twentyseven.png" alt="" />
<img src="../assets/images/twentyeight.png" alt="" /></p>

<p>Parameter issue:
<img src="../assets/images/twentynine.png" alt="" /></p>

<p>Single port - Multiple IN and Multiple OUT issue:
<img src="../assets/images/thirty.png" alt="" /></p>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="replicating-davids-fsm-circuit">Replicating David’s FSM Circuit</h4>
    <p>The nested issue was opened by David around a year ago when he faced this problem while creating the FSM circuit with VC. My first goal was to recreate the nested FSM circuit. You may wonder why recreate it? The circuit was made with an earlier version, and the internal blocks will not have interdependency if I build with the older .vc3. So, I had to recreate every block and circuit. There was an issue when I ran the parameters; they were missing, so I checked with data.json and found missing parameters.</p>
  </li>
  <li>
    <h4 id="parameter-issue-in-nested-code">Parameter Issue in Nested Code</h4>
    <p>The earlier code was developed for one code block dependency, similar to nested blocks. The parameter IDs depended on the “type ID” of the dependency, but if multiple blocks are inside the dependency, this method will have the same type ID, and the parameters cannot map to the correct block. This type_ID needed to be changed in nested code. All blocks in data.json are at a single level, so the types are basic blocks. Initially, I thought to create a random alphanumeric string of 30 characters as the parameter ID. After implementing it, many issues were found, such as if parameters are used in input and output, leading to more confusion in wire mapping. Then, I implemented a new ID not dependent on type_ID, and particular wires will map with blocks, so the issue of mapping extra wires also won’t occur.</p>
  </li>
  <li>
    <h4 id="single-level-fsm-circuit">Single level FSM Circuit</h4>
    <p>After solving the parameters issue, I proceeded with the single-level FSM circuit. The blocks such as laser_ROS2, motor_ROS2, and screen used by David were not from the block library. Initially, it didn’t work, and finding the issue took more time. After analyzing the internal code of the above blocks, they were customized. After modifying and recreating, the whole logic ran without any issue. I ran turtlebot3 in an empty world inside my local machine and ran the FSM logic with VC.</p>
  </li>
  <li>
    <h4 id="issue-in-multi-level-fsm-circuit-major-issue">Issue in multi level FSM Circuit (Major issue)</h4>
    <p>After running the single level, I was confident it would run with nested, but as the saying goes, things don’t always go as planned. David used single port multiple OUT to different blocks and took input outside of the composed block from multiple blocks. However, I wrote for single IN - OUT, so it could not map the multiple blocks; it was taking one block and connecting to another block. This is a big issue as it requires looking again at the mapping of wires and adding conditions for such situations.</p>
  </li>
</ul>

<h2 id="prs-created">PRs Created</h2>
<ol>
  <li>Open - <a href="https://github.com/JdeRobot/VisualCircuit/pull/325">https://github.com/JdeRobot/VisualCircuit/pull/325</a></li>
</ol>

<h2 id="issues">Issues</h2>
<ol>
  <li>Open - <a href="https://github.com/JdeRobot/VisualCircuit/issues/324">https://github.com/JdeRobot/VisualCircuit/issues/324</a></li>
</ol>

<h2 id="links">Links</h2>
<ol>
  <li>Midterm update linkedin post - <a href="https://www.linkedin.com/feed/update/urn:li:activity:7226124206420180992/">https://www.linkedin.com/feed/update/urn:li:activity:7226124206420180992/</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[In the tenth week’s Monday meeting, we discussed progress until the ninth week and outlined the tasks for the upcoming week. The main goal is to perform a robotics application with new nested code. I chose David’s FSM issue for the robotics application. Mentor Dr. José María sent the GitHub link to David’s repository. Several issues arose, and one is still ongoing, which I will discuss in the Challenges section. Through this robotics application, several loose ends were identified, and I resolved them this week. However, one issue remains that I need to address.]]></summary></entry><entry><title type="html">Coding Period Week 11 &amp;amp; 12: Aug 06 ~ Aug 20</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week11-12/" rel="alternate" type="text/html" title="Coding Period Week 11 &amp;amp; 12: Aug 06 ~ Aug 20" /><published>2024-07-05T00:00:00+05:30</published><updated>2024-07-05T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w11-12</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week11-12/"><![CDATA[<p>In the past two weeks, the main task has been to complete the remaining demo and resolve issues that arose along the way. A major issue was with the FSM circuit, where there were multiple inputs and outputs connected to a single port. This issue has been partially resolved; when the number of inputs and outputs is equal, the wires are mapped correctly, but if they are unequal, the issue persists. Another issue was with IDs remaining the same across multiple instances of the same block. This has been resolved using a queue (detailed in the “Achievements and Challenges” section). Additionally, there was a problem where, after pressing the Back button, the model data remained the same, leading to identical IDs for multiple instances. By the end of week 12, the line follower with the composed block feature was successfully solved.</p>

<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Multiple instances of block issue</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Line follower with composed block feature</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Partially resolved the single port with multiple input/output issue</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Completed Python file for CI workflow build test</li>
</ul>

<h2 id="sub-goals">Sub-Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Solved the line follower with a single level</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolved the single port with multiple input/output issue when the number of inputs and outputs is the same</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolved the issue of identical IDs across multiple instances of the same block</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolved the issue of model data remaining the same when the Back button is pressed</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Solved the line follower with composed block feature</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Completed the Python file for the CI workflow</li>
</ul>

<h2 id="images">Images</h2>
<p>Composed circuit of line follower:
<img src="../assets/images/thirtyone.png" alt="" /></p>

<p>Internal perception composed block:
<img src="../assets/images/thirtytwo.png" alt="" /></p>

<p>Global Input Output dialog box:
<img src="../assets/images/thirtythree.png" alt="" /></p>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="identical-ids-across-multiple-instances-of-the-same-block">Identical IDs across multiple instances of the same block</h4>
    <p>In the line follower demo, Dr. Jose Maria suggested using two generic PID blocks, which led to the issue of identical IDs across multiple instances. While the line follower worked with a single PID, using two PID instances is more appropriate as it minimizes errors in linear and angular velocities. The issue arose because multiple levels were converted into a single level after backend processing, resulting in identical IDs for both internal blocks, causing incorrect wire and block mapping. To resolve this, I added an extra script in the “Add as Block” function before the jsonModel.design is appended. This script iterates to modify the IDs with random IDs, and not only the block but also the design’s wire and layer block IDs need to be changed, which was achieved in this extra script.</p>
  </li>
  <li>
    <h4 id="issue-with-model-data-remaining-unchanged-when-the-back-button-is-pressed">Issue with model data remaining unchanged when the Back button is pressed</h4>
    <p>After solving the issue with identical IDs across multiple instances, another issue arose where, upon entering a package, the ID and internal data of the block remained the same as they were at the time of importing. This issue was due to the node layers in the editor, as the model of the editor was appended in the higher-level block stack. The code I wrote to solve the multiple instance issue involved modifying the IDs of the design model. To fix this, I added an extra iteration in the loadPackage function. In the editor, there were two objects—one for links and one for blocks—so both IDs needed to be changed along with the earlier design IDs.</p>
  </li>
  <li>
    <h4 id="single-port-with-multiple-inputoutput-issue">Single port with multiple input/output issue</h4>
    <p>This issue occurred when David’s FSM circuit was created using the composed block feature. In David’s circuit, multiple blocks were attached to a single port. My approach was to use a queue operation to map all blocks, but there were many cases where the number of inputs and outputs was not the same, requiring the creation of extra links. The issue with equal numbers of input/output blocks was resolved using the queue approach.</p>
  </li>
</ul>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[In the past two weeks, the main task has been to complete the remaining demo and resolve issues that arose along the way. A major issue was with the FSM circuit, where there were multiple inputs and outputs connected to a single port. This issue has been partially resolved; when the number of inputs and outputs is equal, the wires are mapped correctly, but if they are unequal, the issue persists. Another issue was with IDs remaining the same across multiple instances of the same block. This has been resolved using a queue (detailed in the “Achievements and Challenges” section). Additionally, there was a problem where, after pressing the Back button, the model data remained the same, leading to identical IDs for multiple instances. By the end of week 12, the line follower with the composed block feature was successfully solved.]]></summary></entry><entry><title type="html">Project Summary</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/summary/" rel="alternate" type="text/html" title="Project Summary" /><published>2024-07-05T00:00:00+05:30</published><updated>2024-07-05T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/summary</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/summary/"><![CDATA[<h2 id="project-overview">Project Overview</h2>
<p>This GSoC project focuses on adding a global block composition feature, resolving nested issues, modifying the current version’s single dependency codebase to a multi-level dependency, implementing two or more demo robotics applications, expanding the block library, automating the testing of VisualCircuit and its documentation using GitHub Actions, and releasing the new version with all issue fixes.</p>

<p>The last 16 weeks have been an incredible and exhilarating journey filled with learning, challenges, and accomplishments. It was a great experience to work on such an exciting project, applying my web development skills to the field of Robotics, a domain I’m deeply passionate about, and learning more about both areas along the way. These past few months were exciting and memorable, with late nights, early mornings, and sometimes not sleeping at all. The joy of completing tasks is hard to describe in words (though my weekly blog attempts to capture some of that emotion).</p>

<p>This entire journey wouldn’t have been possible without the guidance and support of my mentors, Dr. José María Cañas and Toshan Luktuke, whose expertise and dedication were crucial every step of the way.</p>

<p>Thank you to Google for organizing GSoC, and to everyone who has been a part of this journey!</p>

<p>This blog post will be a quick summary of what I worked on during the GSOC period.</p>

<h3 id="mentors">Mentors</h3>
<ul>
  <li><a href="https://github.com/jmplaza">Dr. José María Cañas</a></li>
  <li><a href="https://github.com/toshan-luktuke">Toshan Luktuke</a></li>
</ul>

<p><strong>Official Repository:</strong> <a href="https://github.com/JdeRobot/VisualCircuit/">VisualCircuit</a><br />
<strong>Github Issues</strong>: <a href="https://github.com/JdeRobot/VisualCircuit/issues?q=author%3ABkPankaj+">Summary</a><br />
<strong>Pull Requests:</strong> <a href="https://github.com/JdeRobot/VisualCircuit/pulls?q=author%3ABkPankaj+">Summary</a></p>

<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Developed a CI pipeline using GitHub Actions, including tests for frontend rendering and building a package with the complete architecture.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Introduced a composed block feature to simplify block development.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Modified the current version to support multi-level multi-block dependencies.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Created an autoparking demo with ROS2 and VisualCircuit during the community bonding period.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolved the nested block issue, enabling support for creating multi-level blocks.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Fixed the parameter issue for multi-level blocks.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Solving the line follower exercise of Robotics Application with composed feature.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Recreated FSM Circuit and follow person with both single level and nested level.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Developed several new blocks, including Generic PID, Person Detector, and Laser ROS1.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Addressed the issue of identical IDs being assigned to multiple instances.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Fixed the issue where model data remained unchanged when the Back button was pressed.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolved the single port with multiple input/output issue when the number of inputs and outputs is the same</li>
</ul>

<h2 id="demo">Demo</h2>
<ul>
  <li><a href="https://www.youtube.com/watch?v=xvceQL8AgQ4">Composed and Nested Blocks Feature Demo - v3.6</a></li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/xvceQL8AgQ4?si=MC2oF-uPD1HaN6A9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="community-bonding">Community Bonding</h2>
<p>The first GSoC meeting with mentors took place on May 6th. This meeting focused on introducing the community and mentors, as well as outlining the tasks for the early weeks of the community bonding period.</p>

<h3 id="key-tasks">Key tasks</h3>
<ul>
  <li>Creating a blog website</li>
  <li>Setting up RoboticsAcademy</li>
  <li>Understanding the Robotics Application Manager architecture</li>
  <li>Developing the Laser ROS1 block, solving the autoparking exercise with ROS2 and VisualCircuit</li>
  <li>Publishing a video on JdeRobot’s YouTube channel</li>
  <li>Learning about GitHub releases</li>
</ul>

<p>There was also a meeting with the entire community and GSoC 2024 contributors during the second week of the community bonding period, which provided greater insight into other projects. Additionally, the mentors explained the project goals, including block composition and the nested issue. Although I was initially unclear about this, the explanation made it evident that the issue was crucial, as it impedes users from creating complex applications.</p>

<ul>
  <li><a href="https://youtu.be/SRSmFSIsZWQ?si=qu_DoqOhfxu3OkGi">Autoparking exercise with VC and ROS2 demo</a></li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/SRSmFSIsZWQ?si=UBp4ZiqGCI-VoG_Z" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="coding-period">Coding period</h2>
<p>I initially started with basic tests using GitHub Actions. In the first step of the basic test, I wrote code to install dependencies for both the frontend and backend. I learned GitHub Actions and YAML by observing the CI workflows of other repositories. The CI workflow is triggered whenever there is a pull request to the master branch. After writing the setup code for the CI workflow, I completed a basic frontend test. I encountered a “MODULE NOT FOUND” frontend error because I had stored the node_modules in artifacts. Storing node_modules in artifacts is not ideal since artifacts are typically used for build files. I also modified the blocks in the VisualCircuit resources repository.</p>

<p>CI Workflow tested in forked repo:
<img src="../assets/images/two.png" alt="two" /></p>

<p>After completing the basic frontend test, I proceeded to the Selenium global test. To prepare, I learned Selenium through documentation and YouTube videos. I chose Selenium because I wanted to check the overall functionality of the VisualCircuit application, which involves importing the .vc3 file and building it. This requires GUI interaction, for which Selenium is well-suited. I used Selenium Chrome Standalone for this purpose. Initially, it took some time to understand Selenium Grid and how to open live sessions. By looking at examples from Google, I learned how to click specific buttons by accessing their HTML elements. The File and Open buttons were clicked through Selenium. I also started working on frontend-side interdependencies. This progress occurred during the initial two weeks of the coding period.</p>

<p>Everything was going according to the timeline. Next, it was time to explore block composition and nested issues. I began by adding the Global Input/Output dialog box. I used two approaches to solve the nested issue, but both were disappointing as blank inter-nested dependencies were still appearing in the .vc3. I completed the remaining part of the global test by uploading the .vc3 file into the Selenium Grid, opening it, and building the file. To upload the .vc3, I tried different approaches such as uploading it through YAML, using Docker commands, and leveraging various Python libraries. Ultimately, pyautogui worked for interacting with the OS within Docker. I also improved the Global Input and Output function for fetching the ports for global input/output. Additionally, I modified the code for dependencies on the frontend side but still encountered the same blank issue.</p>

<p>Selenium based first automated global test:
<img src="../assets/images/six.gif" alt="" /></p>

<h3 id="global-input-output">Global Input Output</h3>
<p>At the end of week four, I had touched on all the tasks I needed to do during the coding period. The progress in automated testing was great as Selenium and frontend tests are good for testing the whole architecture of VisualCircuit. Also, the global input/output dialog box was in great shape. However, the nested dependencies still had issues, and the solution seemed more complex, so my mentors and I decided to leave this task for now and continue it in the coming weeks. Let’s start the story of block composition. I took it into my hands when Dr. Jose Maria explained the details and issues regarding block composition during the second week of the coding period meeting. The main goal is to improve efficiency and make VisualCircuit easy to use, generating and using composed blocks without any time delay. As I stated earlier, my first approach was to create a user interface for selecting the input/output that needed to be exposed to external blocks. After that, there will be processing for generating the .vc3 as per the user without disturbing the current circuit on the screen. The issues and challenges were discussed in weekly blogs, so please refer to that for more details.</p>

<ul>
  <li>
    <h4 id="block-dialog-box-and-fetching-ports">Block Dialog Box and fetching ports</h4>
    <p>I referenced the “Edit Information” option as I needed a somewhat similar dialog box. So I replicated that, and now the blank dialog box was ready; it was time to fetch all the details, put them in, and let the user select them. For fetching ports, I created a function in editor.tsx that iterates over all blocks in the model and extracts the port names and types with IDs. After fetching the data, it was time to put all the fetched data in the dialog box with checkboxes, but before that, VisualCircuit has some cases to consider to ensure proper user access.</p>

    <p>Global ports selection dialog box:
<img src="../assets/images/tweleve.png" alt="" /></p>
  </li>
  <li>
    <h5 id="possible-cases">Possible cases</h5>
    <ul>
      <li>The global input port should not link to the block’s port whose link is present with another block. This protects against double data issues on the block side.</li>
      <li>The global output port can be attached to the block’s port in any case, whether there is a wire present or not. The aim is to allow the global output port to be used for debugging.</li>
      <li>No internal wires should be removed if global input/output is used in between the circuit.</li>
    </ul>
  </li>
  <li>
    <h5 id="processing">Processing</h5>
    <p>Once the user selects the respective port and clicks OK, the processing begins. First, all selected ports are fetched and processed in a specific order so that one variable can be used to fetch data. After this, processData is used to create new links for input and output. A new global input/output block is generated, and the block’s position and node are added with canvas repainting. After this, the new link and block type are checked, and the blocks are linked as source and target accordingly. This process is repeated for each global input/output until all are processed. Then, the .vc3 file is generated with all the changes. Before processing, the model was saved in a stack so it could be retrieved after completion, and the whole canvas is repainted with all models kept the same. This way, the current circuit is not disturbed. This process reduces the time for building the circuit; previously, all linking blocks and creating were manual with disturbance in the circuit. So, in one way, the whole process is automated without disturbing the current work.</p>
  </li>
</ul>

<h3 id="composed-block-and-nested-issue">Composed Block and nested issue</h3>
<p>The global input/output feature was unable to generate internal nested dependencies, leading to a significant issue. I discovered this around week 7 when I created a line follower demo with composed blocks. Let’s delve deeper into the composed block and nested issue. I continued working on the same approach from week 3, but it resulted in the same blank dependencies. I then had a meeting with my mentors to discuss how to proceed with this issue. Dr. Jose Maria gave an example of an encoder and decoder that relates frontend and backend processing. So I started with the basics from scratch.</p>

<ul>
  <li>
    <h5 id="blank-dependencies-in-vc3">Blank dependencies in .vc3</h5>
    <p>The blank dependencies in the design section were due to the frontend encoding, confirming that there was no issue with synthesis.py. I then revisited my previous solution and included proper recursion for obtaining all nested dependencies. The solution is quite similar to the graph DFS algorithm, but this was my first time implementing it in a real-life application. However, there was still an issue after this modification. I found that the interfaces for Block and Dependency were not properly defined, which led to the blank object. So, I modified converter.ts and interface.ts. Yes! It worked! The issue was very small but quite complex. The recursion method now goes into every block and its dependencies, which was missing in the week 3 approach.</p>
  </li>
</ul>

<p>Nested dependencies in .vc3 .json file Level 2:
<img src="../assets/images/fourteen.png" alt="" /></p>

<ul>
  <li>
    <h5 id="python-scripts-in-modules-directory-issue">Python Scripts in modules directory issue</h5>
    <p>After resolving the blank dependencies, the next issue was the absence of Python scripts in the modules directory. This required modification on the backend side. Specifically, in synthesis.py, all nested blocks should be iterated to generate the Python files. The process involves iterating through design, dependencies, and again design dependencies, ensuring that no block is left out.</p>
  </li>
</ul>

<p>Modules directory with all nested python files:
<img src="../assets/images/sixteen.png" alt="" /></p>

<ul>
  <li>
    <h5 id="blocks-and-wires-missing-in-datajson-issue">Blocks and wires missing in data.json issue</h5>
    <p>The above iteration is sufficient for creating JSON block objects as it iterates over each one. Wires are also appended similarly to block iteration. But there was a catch… blocks were not linking properly to wires as the path between (block - global input/output - block) is present in the composed circuit, whereas the data.json contained details of blocks, not the global part, and that wire should be mapped directly. Additionally, if there are two or more levels, then two or more global wires must be mapped properly. The error was primarily due to Input or Output not being present, as main.py takes all wire links for data transfers since they run in each block as one process. So, the process would get stuck at those errors, requiring proper mapping.</p>
  </li>
</ul>

<p>Before modification of nested issue - data.json:
<img src="../assets/images/twentyone.png" alt="" /></p>

<ul>
  <li>
    <h5 id="filtering-and-mapping">Filtering and mapping</h5>
    <p>Not only wires but blocks need to be filtered, as there can be other block types—only code blocks should be appended. Additionally, the dependency blocks should not be appended; only the internal code needs to be appended. All these modifications were made on the block side by adding a condition for the block type in the previous iteration.</p>
  </li>
</ul>

<p>After modification of nested issue - data.json:
<img src="../assets/images/twentytwo.png" alt="" /></p>

<p>The main issue now was filtering and mapping the wires, which required more recursive iteration. I performed the iteration until no global-type package block wires remained. In the first iteration, I stored the opposite of the global wire to be retained while making the particular global wire’s source/target absent. In the second iteration, I looked for the same type of ID with the previous global ID and replaced the opposite source/target. If the opposite of the global wire was initially global, it was not deleted; otherwise, it was removed. These iterations continued until the above condition was met. This is a brief logic; you can visit the weekly blog for more details.</p>

<ul>
  <li>
    <h5 id="modification-from-single-block-dependency-to-multi-level-multi-code-dependency">Modification from Single Block Dependency to Multi-Level Multi-Code Dependency</h5>
    <p>After mapping, the next issue that arose was handling multiple code blocks within dependencies, as the existing blocks weren’t able to map correctly. This problem stemmed from the current version being designed for single block dependency. To resolve this, I converted the composition so that higher-level blocks were not stored in data.json. Instead, I transformed the higher-level blocks into a single level before appending them to data.json. There were many errors related to IDs because, in the initial version, the dependency ID was attached to every block, making it impossible to retrieve all blocks of a dependency. I modified this by using the ID of the basic-level block and mapping only those.</p>
  </li>
  <li>
    <h5 id="parameter-issue">Parameter issue</h5>
    <p>During this time, another two weeks had passed, and the nested issue was still in the solving phase. The problem occurred when dependency internal blocks contained parameters, as the parameter ID was linked to the dependency type ID. This was removed in the new modification. Adding the parameters is important because many blocks, such as ROSTopic, Kp, Ki, etc., use parameters. So, new IDs were assigned to the parameters and linked through the source-target method. Before settling on this approach, I initially tried assigning types to avoid changing the parameter ID, but that approach was not feasible for more than two parameters within a dependency.</p>
  </li>
</ul>

<p>Parameter issue:
<img src="../assets/images/twentynine.png" alt="" /></p>

<h4 id="issue-of-identical-ids-across-multiple-instances-of-the-same-block">Issue of identical IDs across multiple instances of the same block</h4>
<p>This issue was unexpected but occurred when using two identical blocks. It became apparent that users might want to use two or more identical blocks at any level of a circuit. The problem was encountered when using two PID blocks for the line follower demo. In data.json, only one PID block was being recorded because basic.code had the same ID, causing it to replace the previous block’s value. To fix this, I modified the IDs of blocks randomly during the loadPackage function and mapped them in the wires accordingly. It took one iteration to modify the block IDs and another to change the respective wire IDs to match the newly assigned block IDs. This approach worked, but when I tried to modify the value inside a package block, the same issue resurfaced. The problem was that the editor layer stored in the stack by the Back function was not modified in the previous iteration, so I added an extra iteration for the layers. Booyah! It worked.</p>

<h4 id="other-issues">Other Issues</h4>
<p>Apart from these major issues, several other challenges arose, which I explained in more detail in my weekly blog. The above explanations provide a high-level overview, but for in-depth details, please refer to the weekly blog.</p>

<h4 id="new-blocks-and-demos">New Blocks and Demos</h4>
<p>I developed the Laser ROS1 block during the community bonding period, along with the Generic PID Block and the Person Detector block, which takes an input image and outputs the image with detected boxes, including objects and probability, person detection, and xy, wh values. Additionally, I worked on the Auto-parking with ROS2 and VisualCircuit during the community bonding period. During the coding period, I recreated the line follower, FSM circuit with composed, and single-level circuit.</p>

<p>Composed circuit of line follower:
<img src="../assets/images/thirtyone.png" alt="" /></p>

<p>Internal perception composed block:
<img src="../assets/images/thirtytwo.png" alt="" /></p>

<h3 id="after-gsoc">After GSoC</h3>
<p>I see this as just the beginning of my contributions to JdeRobot, and I look forward to contributing not only to VisualCircuit but also to other projects. There are several areas I have observed that I would like to work on, including:</p>

<ul>
  <li>Addressing loose ends from the GSoC work, such as resolving the multiple block single port issue in the composed block feature and other related issues.</li>
  <li>Making the CI workflow more robust and solving the Selenium URL issue in GitHub Actions.</li>
  <li>Improving and integrating Dockerization of the Robotics Backend in VisualCircuit.</li>
  <li>Exploring the management of multiple hardware blocks, such as cameras, within a single circuit (e.g., one in a composed block and another at a higher level), and developing strategies for this.</li>
  <li>Developing more real-life robotics applications with VisualCircuit.</li>
</ul>

<h3 id="extra-images">Extra Images</h3>

<p>First meeting with mentors screenshot: 
<img src="../assets/images/meetone.jpg" alt="Firstmeet" /></p>

<p>First meeting with JdeRobot community screenshot: 
<img src="../assets/images/meettwo.jpg" alt="Firstmeet" /></p>

<p>Week 5 meeting screenshot: 
<img src="../assets/images/thirtyfour.png" alt="Firstmeet" /></p>

<p>Week 12 meeting screenshot: 
<img src="../assets/images/thirtyfive.png" alt="Firstmeet" /></p>

<p>Person Detector Block testing: 
<img src="../assets/images/thirtysix.png" alt="Firstmeet" /></p>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[Project Overview This GSoC project focuses on adding a global block composition feature, resolving nested issues, modifying the current version’s single dependency codebase to a multi-level dependency, implementing two or more demo robotics applications, expanding the block library, automating the testing of VisualCircuit and its documentation using GitHub Actions, and releasing the new version with all issue fixes.]]></summary></entry><entry><title type="html">Coding Period Week 2: June 04 ~ June 10</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week2/" rel="alternate" type="text/html" title="Coding Period Week 2: June 04 ~ June 10" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w2</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week2/"><![CDATA[<p>Welcome to the second week of Coding Week progress. In the Monday meeting, we discussed the minimum tasks required for the midterm evaluation, reviewed the previous tasks, and assigned tasks for the next week. One of the issues in VisualCircuit is that it doesn’t generate internal scripts for nested blocks. This issue prevents the creation of complex robotics applications. To address this, I will be modifying the block composition this week. Additionally, I created a basic frontend test and installation process within GitHub Actions. This week, I will work on the first global test with GitHub Actions.</p>

<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Create first global test workflow [In Progress]</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Solve the issue of nested block [In Progress]</li>
</ul>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="learning-tools-for-automation---selenium">Learning tools for Automation - Selenium</h4>
    <p>To create a global test, I needed a tool that could automatically click respective options in the VisualCircuit application. I explored several technologies such as Puppeteer, Playwright, and Selenium. I chose Selenium as it is widely used for automation. I learned how Selenium works and how to use it.</p>
  </li>
  <li>
    <h4 id="integreation-of-selenium-with-github-action">Integreation of Selenium with Github Action</h4>
    <p>From my research, I observed that there are two ways to use Selenium with GitHub Actions: one involves the standard installation of Chrome and ChromeDriver, and the other uses the selenium/standalone-chrome Docker image. I chose the second method as it includes the latest Chrome and ChromeDriver, eliminating the need for a separate ChromeDriver. Additionally, it contains all the functionalities of the Chrome browser. Initially, the browser was not displaying correctly on the Selenium Grid, only showing the logo. To view the live action of the process, I opted for noVNC.</p>
  </li>
  <li>
    <h4 id="automating-clicking-file-and-open-buttons-in-the-menubar">Automating clicking File and Open buttons in the Menubar</h4>
    <p>After successfully running selenium/standalone-chrome on my local machine, I automated the process of clicking the menubar buttons. I needed the XPATH to locate and perform the respective actions. I found the XPATH for the File and Open buttons from the Developer Console. Below is a GIF showing the automation process of opening the browser, launching VC, and clicking the respective buttons.</p>
  </li>
</ul>

<p>Automating clicking File and Open buttons in the Menubar:</p>

<p><img src="../assets/images/five.gif" alt="" /></p>

<ul>
  <li>
    <h4 id="research-about-block-composition">Research about Block Composition</h4>
    <p>The first step was to understand the issue created by David Tapiador. I researched the data flow of opening prebuilt VC projects, adding as a block, and the build options. When the project is built, the dependency section includes package and design key-value pairs. The dependencies were not included, which may be the reason for this nested issue.</p>
  </li>
  <li>
    <h4 id="adding-interdependencies">Adding interdependencies</h4>
    <p>For nested blocks, I modified the Dependency interface to include the interdependencies element. I also modified the package-model and converter for dependencies. Successfully, interdependencies appeared inside dependencies, but they were blank. This blank state is a great checkpoint as modifying internal structures introduced many errors. I am happy with the progress of this blank interdependencies issue.</p>
  </li>
</ul>

<p>Integreation of interdependencies inside dependencies:</p>

<p><img src="../assets/images/three.png" alt="" />
<img src="../assets/images/four.png" alt="" /></p>

<h2 id="commits">Commits</h2>
<ol>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/7ccbea013a311fe1d0af6e71408b84b3b7594f15">https://github.com/JdeRobot/VisualCircuit/commit/7ccbea013a311fe1d0af6e71408b84b3b7594f15</a></li>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/8ea1c0d35e1ee11f282a7407635ff899c538f34f">https://github.com/JdeRobot/VisualCircuit/commit/8ea1c0d35e1ee11f282a7407635ff899c538f34f</a></li>
</ol>

<h2 id="previous-pr-updates">Previous PR Updates</h2>
<ol>
  <li>Merged - <a href="https://github.com/JdeRobot/VisualCircuit/pull/309">https://github.com/JdeRobot/VisualCircuit/pull/309</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[Welcome to the second week of Coding Week progress. In the Monday meeting, we discussed the minimum tasks required for the midterm evaluation, reviewed the previous tasks, and assigned tasks for the next week. One of the issues in VisualCircuit is that it doesn’t generate internal scripts for nested blocks. This issue prevents the creation of complex robotics applications. To address this, I will be modifying the block composition this week. Additionally, I created a basic frontend test and installation process within GitHub Actions. This week, I will work on the first global test with GitHub Actions.]]></summary></entry><entry><title type="html">Coding Period Week 3: June 11 ~ June 17</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week3/" rel="alternate" type="text/html" title="Coding Period Week 3: June 11 ~ June 17" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w3</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week3/"><![CDATA[<p>On the 10th of June, during Monday’s meeting, Dr. JoseMaria explained the Global Input Output issue. Whenever the user creates a Robotics Application circuit, if it needs to generate a block, the user needs to modify the circuit, which is very time-consuming. Therefore, we need to implement the functionality for generating both the block and the circuit without modifying the circuit. This functionality will improve user performance on VC. Additionally, the tasks from the previous week were only partially completed, so they have been reassigned for this week.</p>
<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Modification of VC block compostion for Global Input Output [In Progress]</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Create first global test workflow [In Progress]</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Solve the issue of nested block [In Progress]</li>
</ul>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="understanding-the-vc-block-composition">Understanding the VC Block Composition</h4>
    <p>I went through some frontend files such as <code class="language-plaintext highlighter-rouge">menu/index.tsx</code>, <code class="language-plaintext highlighter-rouge">project-info-dialog.tsx</code>, and <code class="language-plaintext highlighter-rouge">editor.ts</code>. These files are responsible for editing the project information on the frontend side. Initially, I thought of adding Global Input Output functionality within the existing project editing interface. However, as I began implementing it, I realized that it was more difficult than anticipated since it required changing the Project Info interface in every file. Therefore, I decided to build a new dialog box that can be opened from the “Save Block” option in the menu bar.</p>
  </li>
  <li>
    <h4 id="implementation-of-global-input-output-on-frontend">Implementation of Global Input Output on frontend</h4>
    <p>For choosing the Global Input Output, all inputs and outputs can be shown, and from there, the Global Input Output can be assigned. I created a new script for the dialog box and modified <code class="language-plaintext highlighter-rouge">editor.ts</code> and <code class="language-plaintext highlighter-rouge">menu/index.tsx</code>. Currently, all inputs and outputs are displayed. Next week, I will work on assigning the inputs and outputs as Global for the block.</p>
  </li>
</ul>

<p>Checkbox for global input output - dialog box:</p>

<p><img src="../assets/images/five.png" alt="" /></p>

<ul>
  <li>
    <h4 id="solving-the-nested-block-with-different-approach">Solving the nested block with different approach</h4>
    <p>In this approach, I didn’t use <code class="language-plaintext highlighter-rouge">node.dependencies</code> but instead created blocks and wires for internal dependencies. This solution was suggested by ChatGPT, so I tried it. It involved creating internal wires for dependencies and making the linkages. I spent around two days on this, but it didn’t yield the desired results. Additionally, it was suggesting editing many internal components, so I dropped this idea and returned to my nested block solution.</p>
  </li>
  <li>
    <h4 id="solving-the-nested-block-with-last-week-approach">Solving the nested block with last week approach</h4>
    <p>In the previous week, I encountered blank dependencies. I noticed that the interface dependencies contained a single dependency, so I modified it to include an array and used recursive calls to add internal dependencies. Additionally, <code class="language-plaintext highlighter-rouge">factory.tsx</code> had not been changed, so I modified that as well. However, the issue of blank dependencies still persists. I need to consult the mentors regarding this issue, as I feel it can be resolved with some more effort.</p>
  </li>
</ul>

<h2 id="previous-pr-updates">Previous PR Updates</h2>
<ol>
  <li>Merged - <a href="https://github.com/JdeRobot/VisualCircuit-resources/pull/12">https://github.com/JdeRobot/VisualCircuit-resources/pull/12</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[On the 10th of June, during Monday’s meeting, Dr. JoseMaria explained the Global Input Output issue. Whenever the user creates a Robotics Application circuit, if it needs to generate a block, the user needs to modify the circuit, which is very time-consuming. Therefore, we need to implement the functionality for generating both the block and the circuit without modifying the circuit. This functionality will improve user performance on VC. Additionally, the tasks from the previous week were only partially completed, so they have been reassigned for this week. Goals Modification of VC block compostion for Global Input Output [In Progress] Create first global test workflow [In Progress] Solve the issue of nested block [In Progress]]]></summary></entry><entry><title type="html">Coding Period Week 4: June 18 ~ June 24</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week4/" rel="alternate" type="text/html" title="Coding Period Week 4: June 18 ~ June 24" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w4</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week4/"><![CDATA[<p>In the fourth week’s Monday meeting, I showed a working demo and discussed the previous week’s tasks. The mentors suggested working on block composition for global input/output. The other nested issue is quite complex and needs more time, so this task is postponed to other week.</p>
<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Complete the first Selenium-based global test</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Modification of VC block compostion for Global Input Output</li>
</ul>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="pasting-vc3-file-and-opening-the-file-in-vc">Pasting .vc3 file and opening the file in VC</h4>
    <p>I first tried putting the circuit file in the Selenium Docker container through a Python script, but it wasn’t a great solution, so I decided to put the circuit file through YAML using Docker commands. After solving this, I needed to open the file from a particular directory in the file manager dialog box. For this, OS-level control was needed, so I used the pyautogui library for opening the file in Visual Circuit.</p>
  </li>
  <li>
    <h4 id="building-and-solving-inseure-download-issue">Building and solving inseure download issue</h4>
    <p>There were many errors when building the project as the backend was running on localhost on the local machine and had to be accessed from the Docker container, resulting in fetch errors. These were resolved after modifying setting.py and .env. After that, the browser wasn’t allowing downloads as Chrome considered the HTTP frontend insecure. After some Googling and searching on StackOverflow, I found a solution. Finally, the whole process was completed automatically by Selenium. The complete process is shown in the GIF below.
Selenium based first automated global test:</p>
  </li>
</ul>

<p><img src="../assets/images/six.gif" alt="" /></p>

<ul>
  <li>
    <h4 id="improving-fetch-global-input-and-output-function">Improving fetch Global Input and Output function</h4>
    <p>In the previous week, I was able to fetch the port data from all blocks, but it was using more iterations and not proper internal functions for fetching the data. So I improved the global input/output function and also added the submit and checklist handlers to pass data to other scripts.</p>
  </li>
  <li>
    <h4 id="creating-input-output-blocks-automatically-from-checkbox-data">Creating input output blocks automatically from checkbox data</h4>
    <p>Depending on the port chosen by the user, the particular global input/output block is generated automatically. It checks the port type, and according to that, the input or output block is generated with the same name. Initially, the global input/output block position is the same as the initial position, and the links are null.</p>
  </li>
  <li>
    <h4 id="modification-of-links-and-creating-respective-input-output-block">Modification of Links and creating respective input output block</h4>
    <p>I researched the internal structure of the model and tried to access the links and respective link IDs of each block. After this, I wrote down all possible cases for creating a circuit by the user. One case is where the global input/output has zero links, so one link has to be created, and the source and target assigned. Another case is that there is already a link connected with the block, so according to the port type, the particular source or target has to be removed and a new one assigned. Apart from that, there are other cases that need to be tested in the future, such as if there are two links at the same port, which one to choose. I want to ask the mentors about these cases.</p>
  </li>
  <li>
    <h4 id="saving-and-retriving-old-blocks-function">Saving and retriving old blocks function</h4>
    <p>Before generating the .vc3 composed block file, the old model has to be saved so the user can continue working on the circuit without worrying about the blocks global input/output. The model and project info are saved in the stack, and whenever the build is completed, the old model is loaded. There were constant errors, such as storing the data in the stack but it was changing with changes, as I was storing this.activModel directly in the stack, causing changes in the stack. For that, I tried several methods using deepCopy, custom functions, and cloneDeep. Both deepCopy and custom functions didn’t work, so I used the cloneDeep library, which worked without any errors. Similar to the “Save as” functionality, I used that part of the code for generating .vc3 file.</p>
  </li>
</ul>

<p>Normal circuit to be converted for block:
<img src="../assets/images/eight.png" alt="" /></p>

<p>Global input ouput port selection :
<img src="../assets/images/nine.png" alt="" /></p>

<p>Generated block:
<img src="../assets/images/seven.png" alt="" /></p>

<p>Internal block structure:
<img src="../assets/images/ten.png" alt="" /></p>

<h2 id="commits">Commits</h2>
<ol>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/f9bd5007fa83a4ee2503e1780006a425c1994372">https://github.com/JdeRobot/VisualCircuit/commit/f9bd5007fa83a4ee2503e1780006a425c1994372</a></li>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/51c82737938e5370e1e3047b5ee9d9bdeb117940">https://github.com/JdeRobot/VisualCircuit/commit/51c82737938e5370e1e3047b5ee9d9bdeb117940</a></li>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/0d3759b154f110318e6b6b7e29fa61012262238a">https://github.com/JdeRobot/VisualCircuit/commit/0d3759b154f110318e6b6b7e29fa61012262238a</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[In the fourth week’s Monday meeting, I showed a working demo and discussed the previous week’s tasks. The mentors suggested working on block composition for global input/output. The other nested issue is quite complex and needs more time, so this task is postponed to other week. Goals Complete the first Selenium-based global test Modification of VC block compostion for Global Input Output]]></summary></entry><entry><title type="html">Coding Period Week 5: June 25 ~ July 01</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week5/" rel="alternate" type="text/html" title="Coding Period Week 5: June 25 ~ July 01" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w5</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week5/"><![CDATA[<p>On Monday’s meeting, we discussed possible cases for a composed block. Last week, I created the composed block functionality in that whenever a link exists in both input and output ports, the original link is removed, and a new link with the input/output block attached is added. However, this could cause a problem if someone mistakenly selects a port with internal wiring, potentially causing the robotics application to malfunction. Therefore, blocks with existing wiring should not be shown in the block selection dialog box. Additionally, an input port cannot have multiple wires, as this would create issues in determining which link to use. However, an output port can have multiple links, allowing data to be shared across both links. These changes need to be made this week, and I also need to refine the messy code. Dr. Jose Maria also discussed creating a demo application this week.</p>
<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Modify the composed block to follow specific rules</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Refine the previous block composition code</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Create demo applications with composed blocks</li>
</ul>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="solving-the-global-block-input-links-issue-and-extending-block-composition-for-every-block">Solving the global block input links issue and extending block composition for every block</h4>
    <p>As discussed above, we should not have more than one link at the input port, and we need to hide input ports with internal wiring from the block composition dialog box. I modified the globalInputOutput function to segregate ports based on links and port types. In last week’s code, only code blocks were supported, so I made changes to support every block. I also observed an issue with the text being fetched from the package, which was taking a 40-character name. I modified it to take the name port from the labels of the blocks.</p>
  </li>
  <li>
    <h4 id="solving-the-global-block-output-links-issue-and-refining-existing-code">Solving the global block output links issue and refining existing code</h4>
    <p>For blocks with multiple wiring at the output side, a new link needs to be added with the respective global input/output attached. Unlike the global input block issue, this requires the parent global output block ID and the respective link ID so that the existing link is not modified. These changes were extensive and altered last week’s code, so I refined the overall code. After refinement, the entire global input/output block was tested with all cases and is working as expected.</p>
  </li>
</ul>

<h2 id="commits">Commits</h2>
<ol>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/03c0b436eaea6d64c97d34d1dd1728b4de9556e6">https://github.com/JdeRobot/VisualCircuit/commit/03c0b436eaea6d64c97d34d1dd1728b4de9556e6</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[On Monday’s meeting, we discussed possible cases for a composed block. Last week, I created the composed block functionality in that whenever a link exists in both input and output ports, the original link is removed, and a new link with the input/output block attached is added. However, this could cause a problem if someone mistakenly selects a port with internal wiring, potentially causing the robotics application to malfunction. Therefore, blocks with existing wiring should not be shown in the block selection dialog box. Additionally, an input port cannot have multiple wires, as this would create issues in determining which link to use. However, an output port can have multiple links, allowing data to be shared across both links. These changes need to be made this week, and I also need to refine the messy code. Dr. Jose Maria also discussed creating a demo application this week. Goals Modify the composed block to follow specific rules Refine the previous block composition code Create demo applications with composed blocks]]></summary></entry><entry><title type="html">Coding Period Week 6 &amp;amp; 7: July 02 - July 15</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week6-7/" rel="alternate" type="text/html" title="Coding Period Week 6 &amp;amp; 7: July 02 - July 15" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w6-7</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week6-7/"><![CDATA[<p>All the issues and possible cases of composed blocks were resolved last week. In the Monday meeting on July 1st, I showed a dummy example of an adder using composed blocks, and the mentors discussed the robotics application that needs to be developed using the composed block feature. In the 6th week, I was busy with personal work and unable to complete my tasks on time, so I requested an extension for the 6th week’s work to be done in the 7th week. During the 6th week, I searched for Gazebo worlds and downloaded several open-source ones. My initial plan was to develop the drone gymkhana of RoboticsAcademy using composed blocks. However, it was not available in the newer version of RADI, so I could not obtain the world and models from RoboticsInfrastructure. I decided to go with the Follow Road exercise from RA, as it was already developed but with an earlier version of VC. I also encountered a major issue in composed block that I need to discuss with the mentors.</p>
<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Develop the Robotics Application with composed block</li>
  <li class="task-list-item">(Major issue found)</li>
</ul>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>
<ul>
  <li>
    <h4 id="developed-the-follow-road-in-vc">Developed the Follow Road in VC</h4>
    <p>Before jumping into composed blocks, I developed the Follow Road with predefined blocks.</p>
  </li>
  <li>
    <h4 id="solved-issues-of-packages-names">Solved issues of packages names</h4>
    <p>There was an issue when there were multiple block packages in block dialog box, making it difficult to identify what to select. This issue was resolved, so now all names of packages are shown in the block dialog box.</p>
  </li>
</ul>

<p>Issue image:
<img src="../assets/images/eleven.png" alt="" /></p>

<p>After modification image:
<img src="../assets/images/tweleve.png" alt="" /></p>

<ul>
  <li>
    <h4 id="wrong-attachment-of-link-issue">Wrong attachment of link issue</h4>
    <p>In my previous code, I tried to link the block and global ports by finding the name of the ports, but this caused an issue of attaching the link to any block with the same port name. In the new code, it verifies the block ID and name before linking.</p>
  </li>
  <li>
    <h4 id="major-issue-">Major issue :</h4>
    <p>When I used the package block inside the composed block, it didn’t generate Python scripts for the internal packages. However, the basic blocks did not have this issue.</p>
  </li>
</ul>

<p>Blank script and no internal script in the modules directory issue image:
<img src="../assets/images/thirteen.png" alt="" /></p>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[All the issues and possible cases of composed blocks were resolved last week. In the Monday meeting on July 1st, I showed a dummy example of an adder using composed blocks, and the mentors discussed the robotics application that needs to be developed using the composed block feature. In the 6th week, I was busy with personal work and unable to complete my tasks on time, so I requested an extension for the 6th week’s work to be done in the 7th week. During the 6th week, I searched for Gazebo worlds and downloaded several open-source ones. My initial plan was to develop the drone gymkhana of RoboticsAcademy using composed blocks. However, it was not available in the newer version of RADI, so I could not obtain the world and models from RoboticsInfrastructure. I decided to go with the Follow Road exercise from RA, as it was already developed but with an earlier version of VC. I also encountered a major issue in composed block that I need to discuss with the mentors. Goals Develop the Robotics Application with composed block (Major issue found)]]></summary></entry><entry><title type="html">Coding Period Week 8: July 16 ~ July 22</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week8/" rel="alternate" type="text/html" title="Coding Period Week 8: July 16 ~ July 22" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w8</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week8/"><![CDATA[<p>In the eighth week’s Monday meeting, we discussed the issues I faced last week and the major issues encountered with the demo application, specifically with the composed block feature. Mentors explained the concept and showed the workflow to address the problem using an encoder and decoder example. The major issue was a nested issue, similar to the hurdles experienced in week 3 regarding nested blocks. This week, I completely focused on the nested issue and achieved significant progress compared to week 3.</p>
<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Solve the blank dependencies issue - nested issue</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Resolve the issue of nested Python files not appearing in the Modules directories - nested issue</li>
</ul>

<h2 id="images">Images</h2>
<p>Nested dependencies in .vc3/ .json file Level 2:
<img src="../assets/images/fourteen.png" alt="" /></p>

<p>Nested dependencies in .vc3/ .json file Level 3:
<img src="../assets/images/fifteen.png" alt="" /></p>

<p>Modules directory with all nested python files:
<img src="../assets/images/sixteen.png" alt="" /></p>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="analyzing-the-week-3-code-for-the-nested-issue">Analyzing the Week 3 Code for the Nested Issue</h4>
    <p>Dr. Jose Maria suggested in the meeting to revisit the basics and look for solutions in the internal architecture. Therefore, I recreated the issue from week 3. I wrote two codes: one where a new node is created according to dependencies and new wiring was made. However, this approach was not sustainable due to the potential complexity from multiple dependencies. I dropped that idea. The second approach was recursion-based on frontend side, aimed at getting all dependencies, but it resulted in blank dependencies. After analyzing this solution, I changed the recursion solution from the package level.</p>
  </li>
  <li>
    <h4 id="blank-dependicies-issue">Blank dependicies issue</h4>
    <p>Upon deeper analyzing into PackageBlockModel and factory.tsx, I observed that I had created nested dependencies that were not present in the interface of PackageBlockModel. I modified the dependency array for every script and added internal dependencies to the respective interface and methods. The solution was close to being resolve, but I took a different approach in week 3.</p>
  </li>
  <li>
    <h4 id="python-script-in-modules-directory-issue">Python script in modules directory issue</h4>
    <p>Initially, the circuit was not building, but the Save as function was working. Due to nested dependencies, the synthesis file could not be processed. I added a recursive solution to get the nested dependencies from the frontend, which was very challenging. The files were being created but not at all levels. After debugging, I found that the issue was the missing internal dependencies at each level and the improper assignment of keys. The above images attached show the progress made this week.</p>
  </li>
</ul>

<h2 id="pr-created">PR Created</h2>
<ol>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/pull/322">https://github.com/JdeRobot/VisualCircuit/pull/322</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[In the eighth week’s Monday meeting, we discussed the issues I faced last week and the major issues encountered with the demo application, specifically with the composed block feature. Mentors explained the concept and showed the workflow to address the problem using an encoder and decoder example. The major issue was a nested issue, similar to the hurdles experienced in week 3 regarding nested blocks. This week, I completely focused on the nested issue and achieved significant progress compared to week 3. Goals Solve the blank dependencies issue - nested issue Resolve the issue of nested Python files not appearing in the Modules directories - nested issue]]></summary></entry><entry><title type="html">Coding Period Week 9: July 23 ~ July 29</title><link href="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week9/" rel="alternate" type="text/html" title="Coding Period Week 9: July 23 ~ July 29" /><published>2024-06-10T00:00:00+05:30</published><updated>2024-06-10T00:00:00+05:30</updated><id>http://localhost:4000/gsoc2024-Pankaj_Borade/code-w9</id><content type="html" xml:base="http://localhost:4000/gsoc2024-Pankaj_Borade/coding-week9/"><![CDATA[<p>During our Monday meeting, we discussed the progress I made on the nested and composed block issue and outlined what needs to be achieved in the upcoming weeks. Essentially, there were two main goals for this week, but the nested issue had many internal problems. In the current version, dependencies could only have a single code block, and wires and blocks were created for whole dependencies. If there were multiple codes, it would only take one code block and generate the data.json. Therefore, I also needed to fix this and make all links and blocks from multiple levels into a single layer in the backend processing. This is why resolving the nested issue took more time. Additionally, there were many errors that came up during the process, which further delayed progress. However, by the end of the week, the entire nested issue was resolved.</p>

<h2 id="goals">Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Solve the nested issue completely</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Integrate nested code into last week composed block code.</li>
</ul>

<h2 id="sub-goals">Sub-Goals</h2>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Understanding backend processing for single-level dependencies.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Creating sample tests to determine necessary wires and blocks for the built zip file.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Fixing the issue of missing nested wires in data.json after backend processing.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Addressing the problem of missing nested internal blocks in data.json.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Modifying the current version’s single code block dependency code to support multi-level dependencies with multiple code blocks.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Writing code for processing wires, including filtering and mapping to required blocks.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Removing unwanted links between global inputs outputs and testing the nested issue code with different examples.</li>
</ul>

<h2 id="images">Images</h2>
<p>Level1 Sample Circuit:
<img src="../assets/images/seventeen.png" alt="" /></p>

<p>Level2 Inside test_second_block Block (nested level 1):
<img src="../assets/images/eighteen.png" alt="" /></p>

<p>Level3 Inside test_first_block Block (nested level 2):
<img src="../assets/images/nineteen.png" alt="" /></p>

<p>Before modification of nested issue - data.json:
<img src="../assets/images/twentyone.png" alt="" /></p>

<p>After modification of nested issue - data.json:
<img src="../assets/images/twentytwo.png" alt="" /></p>

<p>Python Modules Scripts after processing:
<img src="../assets/images/twenty.png" alt="" /></p>

<p>Output including printing at every level and code block:
<img src="../assets/images/twentythree.png" alt="" /></p>

<h2 id="accomplishment-and-challenges">Accomplishment and Challenges</h2>

<ul>
  <li>
    <h4 id="modifying-the-current-version-to-support-multi-code-block-dependency">Modifying the Current Version to Support Multi Code Block Dependency</h4>
  </li>
</ul>

<p>When I completed writing the entire logic, I found that multiple codes were not supported, and extra wires were created that couldn’t connect. Additionally, other code blocks of inter-dependency were not included in data.json, leading to improper linkage. I modified synthesize_modules and changed the logic for adding internal blocks, so they were not treated as whole dependencies. This way, the blocks were added at one level.</p>

<ul>
  <li>
    <h4 id="understanding-backend-processing-by-creating-sample-tests">Understanding Backend Processing by Creating Sample Tests</h4>
    <p>To understand the process, I created a sample test and added blocks and wires in data.json. This helped me see how the internal file structure of the zip file works after building. I drew the whole connection and tried to replicate it by modifying synthesis.py using recursive and iterative techniques until level 1 was achieved.</p>
  </li>
  <li>
    <h4 id="fixing-the-issue-of-missing-nested-blocks-after-backend-processing">Fixing the Issue of Missing Nested Blocks After Backend Processing</h4>
    <p>I created the process_dependency function, which is called inside synthesize_modules. This function iterates over all blocks of a dependency and creates module Python scripts depending on the block type. Only code block type modules and block values are included in data.json. If there is a dependency inside a dependency, process_dependency is called recursively until no nested dependencies are left. This method ensures that only code blocks are included in the modules directory, while other blocks such as global input/output, dependencies, and constants are filtered out.</p>
  </li>
  <li>
    <h4 id="writing-code-for-filtering-and-mapping-the-wires-in-backend">Writing code for filtering and mapping the wires in backend</h4>
    <p>After obtaining the proper blocks in data.json, I focused on the wires. In the current version, level 1 blocks were being added to data.json, so I modified process_dependency to include every wire. There were wires for packages and global input/output, which required proper filtering and the creation of new links between the required blocks. I iterated over all wires selected from process_dependency and segregated them based on the wire’s source and target block ID. After that, in another iteration, I checked each wire with the filtered blocks in data.json to determine if the block was present, adding the key pair of ob:absent. Then, I created process_wire, where all wire mappings were handled. This function contains nested iterations:</p>
  </li>
</ul>

<ol>
  <li>The first internal iteration iterates over all valid wires, checks for global input and output, and either saves the wire in a dictionary or removes the entire source-target link based on the presence of the absent value.</li>
  <li>The second internal iteration checks the wire’s port, replacing package-type wire with the corresponding source-target dictionary generated in the last iteration.</li>
</ol>

<p>This way, new links are created, and the absent value helps the code decide whether to loop again or exit process_wire.</p>

<h2 id="prs-created">PRs Created</h2>
<ol>
  <li>Closed and Merged - <a href="https://github.com/JdeRobot/VisualCircuit/pull/322">https://github.com/JdeRobot/VisualCircuit/pull/322</a></li>
  <li>Closed and Merged - <a href="https://github.com/JdeRobot/VisualCircuit/pull/323">https://github.com/JdeRobot/VisualCircuit/pull/323</a></li>
</ol>

<h2 id="commits">Commits</h2>
<ol>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/a367ffb4f22dd3b2396633ef6e909108777e0376">https://github.com/JdeRobot/VisualCircuit/commit/a367ffb4f22dd3b2396633ef6e909108777e0376</a></li>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/3afffd77ab40766c36ebbbcb1bb603feb38b70eb">https://github.com/JdeRobot/VisualCircuit/commit/3afffd77ab40766c36ebbbcb1bb603feb38b70eb</a></li>
  <li><a href="https://github.com/JdeRobot/VisualCircuit/commit/91ae5f1a8b4abe80ce3c2edf128467f6376f4644">https://github.com/JdeRobot/VisualCircuit/commit/91ae5f1a8b4abe80ce3c2edf128467f6376f4644</a></li>
</ol>]]></content><author><name>Pankaj Keshav Borade</name></author><category term="Blog" /><summary type="html"><![CDATA[During our Monday meeting, we discussed the progress I made on the nested and composed block issue and outlined what needs to be achieved in the upcoming weeks. Essentially, there were two main goals for this week, but the nested issue had many internal problems. In the current version, dependencies could only have a single code block, and wires and blocks were created for whole dependencies. If there were multiple codes, it would only take one code block and generate the data.json. Therefore, I also needed to fix this and make all links and blocks from multiple levels into a single layer in the backend processing. This is why resolving the nested issue took more time. Additionally, there were many errors that came up during the process, which further delayed progress. However, by the end of the week, the entire nested issue was resolved.]]></summary></entry></feed>